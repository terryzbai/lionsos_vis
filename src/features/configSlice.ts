import { createAsyncThunk, createSlice, isAction, PayloadAction } from '@reduxjs/toolkit'
import { store, RootState } from '../app/store'
import { init_node_data } from '../components/nodes'

export interface VMState {
  name: string
  id: number
  priority: number
}

export interface PDState {
  id: string,
  name: string
  priority: number
  budget: number
  period: number
  pp: number
  prog_img: string
  mappings: string[]
  pds: string[]
  vms: string[]
  parent: string
}

export interface MRState {
  name: string
  phy_addr: number
  size: number
  page_size: number
}

export interface CCState {
  id: string
  end1: string
  end2: string
}

export interface NodeEditorState {
  visible: boolean
  node_id: string
}

export interface ConfigState {
  mrs: MRState[]
  pds: PDState[]
  ccs: CCState[]
  graph: PDState[]
  nodeEditor: NodeEditorState
}


const initialState: ConfigState = {
  mrs: [],
  pds: [],
  ccs: [],
  graph: [],
  nodeEditor: {
    visible: false,
    node_id: ''
  }
}

export const configSlice = createSlice({
  name: 'component',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addNodeIntoList: (state, action: PayloadAction<{id: string, shape: string}>) => {
      const new_pd : PDState = {
        id: action.payload.id,
        ...init_node_data[action.payload.shape]
      }
      state.pds.push(new_pd)
      console.log("Add a", action.payload.shape, action.payload.id)
    },
    openNodeEditor: (state, action: PayloadAction<string>) => {
      console.log("open node:", action.payload)
      state.nodeEditor.visible = true
      state.nodeEditor.node_id = action.payload
    },
    closeNodeEditor: (state) => {
      state.nodeEditor.visible = false
    },
    updateNode: (state, action: PayloadAction<PDState>) => {
      const newNodeData = action.payload
      const oldNode = state.pds.find(pd => pd.id === newNodeData.id)
      const index = state.pds.indexOf(oldNode)
      if (index >= 0) {
        // state.pds[index].name = newNodeData.name
        state.pds[index] = {...newNodeData}
      } else {
        console.log("Invalid node_id")
      }

      // List all nodes

      // Update label
      // graph_node.attr('label/text', newNodeData.name)
    }
    // increment: state => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1
    // },
    // decrement: state => {
    //   state.value -= 1
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload
    // }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: builder => {
  //   builder
  //     .addCase(incrementAsync.pending, state => {
  //       state.status = 'loading'
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle'
  //       state.value += action.payload
  //     })
  //     .addCase(incrementAsync.rejected, state => {
  //       state.status = 'failed'
  //     })
  // }
})

export const { addNodeIntoList, openNodeEditor, closeNodeEditor, updateNode } = configSlice.actions

export const getPDList = (state: RootState) => state.config.pds
export const getNodeEditorStatus = (state: RootState) => state.config.nodeEditor.visible
export const getCurrentPD = (state: RootState) => {
  // console.log("Get current node: ", state.config.nodeEditor.node_id)
  return state.config.pds.find(pd => pd.id === state.config.nodeEditor.node_id)
}

// console.log(store.getState())

// store.subscribe(() => {
//   console.log(store.getState())
// })

// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState())
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount))
//     }
//   }

export default configSlice.reducer